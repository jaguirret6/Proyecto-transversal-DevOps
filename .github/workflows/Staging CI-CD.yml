# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Staging CI

on: #se define los eventos que disparan el workflow, puede ser mas de uno. En este caso push y pull request
  push: ##evento que dispara el workflow##
    branches: [ "staging" ]

permissions:
  contents: read

jobs:
  build_and_test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
        
  push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'

    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USER }}/staging-api-devops:1.${{ github.run_number }}
            ${{ secrets.DOCKER_USER }}/staging-api-devops:latest
          labels: ${{ steps.meta.outputs.labels }}
  
  re_deploy_render:
    runs-on: ubuntu-latest
    name: Trigger redeploy on render
    needs: push_to_docker_hub
    steps:
      - name: Trigger redeploy on Render
        run: |
         curl -X POST "${{ secrets.STAGING_RENDER_WEBHOOK }}&imgURL=docker.io%2F${{ secrets.DOCKER_USER }}%2Fstaging-api-devops%3A1.${{ github.run_number }}"
        # POST con imagen versionada

